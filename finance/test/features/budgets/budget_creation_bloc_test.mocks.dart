// Mocks generated by Mockito 5.4.6 from annotations
// in finance/test/features/budgets/budget_creation_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:finance/core/events/transaction_event_publisher.dart' as _i10;
import 'package:finance/features/accounts/domain/entities/account.dart' as _i3;
import 'package:finance/features/accounts/domain/repositories/account_repository.dart'
    as _i12;
import 'package:finance/features/budgets/domain/entities/budget.dart' as _i2;
import 'package:finance/features/budgets/domain/entities/transaction_budget_link.dart'
    as _i7;
import 'package:finance/features/budgets/domain/repositories/budget_repository.dart'
    as _i5;
import 'package:finance/features/budgets/domain/services/budget_filter_service.dart'
    as _i11;
import 'package:finance/features/budgets/domain/services/budget_update_service.dart'
    as _i8;
import 'package:finance/features/categories/domain/entities/category.dart'
    as _i4;
import 'package:finance/features/categories/domain/repositories/category_repository.dart'
    as _i13;
import 'package:finance/features/transactions/domain/entities/transaction.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBudget_0 extends _i1.SmartFake implements _i2.Budget {
  _FakeBudget_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccount_1 extends _i1.SmartFake implements _i3.Account {
  _FakeAccount_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategory_2 extends _i1.SmartFake implements _i4.Category {
  _FakeCategory_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BudgetRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBudgetRepository extends _i1.Mock implements _i5.BudgetRepository {
  MockBudgetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.Budget>> getAllBudgets() => (super.noSuchMethod(
        Invocation.method(
          #getAllBudgets,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Budget>>.value(<_i2.Budget>[]),
      ) as _i6.Future<List<_i2.Budget>>);

  @override
  _i6.Future<List<_i2.Budget>> getActiveBudgets() => (super.noSuchMethod(
        Invocation.method(
          #getActiveBudgets,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Budget>>.value(<_i2.Budget>[]),
      ) as _i6.Future<List<_i2.Budget>>);

  @override
  _i6.Future<_i2.Budget?> getBudgetById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getBudgetById,
          [id],
        ),
        returnValue: _i6.Future<_i2.Budget?>.value(),
      ) as _i6.Future<_i2.Budget?>);

  @override
  _i6.Future<_i2.Budget?> getBudgetBySyncId(String? syncId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBudgetBySyncId,
          [syncId],
        ),
        returnValue: _i6.Future<_i2.Budget?>.value(),
      ) as _i6.Future<_i2.Budget?>);

  @override
  _i6.Future<List<_i2.Budget>> getBudgetsByCategory(int? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBudgetsByCategory,
          [categoryId],
        ),
        returnValue: _i6.Future<List<_i2.Budget>>.value(<_i2.Budget>[]),
      ) as _i6.Future<List<_i2.Budget>>);

  @override
  _i6.Future<_i2.Budget> createBudget(_i2.Budget? budget) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBudget,
          [budget],
        ),
        returnValue: _i6.Future<_i2.Budget>.value(_FakeBudget_0(
          this,
          Invocation.method(
            #createBudget,
            [budget],
          ),
        )),
      ) as _i6.Future<_i2.Budget>);

  @override
  _i6.Future<_i2.Budget> updateBudget(_i2.Budget? budget) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBudget,
          [budget],
        ),
        returnValue: _i6.Future<_i2.Budget>.value(_FakeBudget_0(
          this,
          Invocation.method(
            #updateBudget,
            [budget],
          ),
        )),
      ) as _i6.Future<_i2.Budget>);

  @override
  _i6.Future<void> deleteBudget(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBudget,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAllBudgets() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllBudgets,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateSpentAmount(
    int? budgetId,
    double? spentAmount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSpentAmount,
          [
            budgetId,
            spentAmount,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> addTransactionToBudget(
    int? transactionId,
    int? budgetId, {
    double? amount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransactionToBudget,
          [
            transactionId,
            budgetId,
          ],
          {#amount: amount},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> removeTransactionFromBudget(
    int? transactionId,
    int? budgetId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTransactionFromBudget,
          [
            transactionId,
            budgetId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i2.Budget>> getBudgetsForTransaction(int? transactionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBudgetsForTransaction,
          [transactionId],
        ),
        returnValue: _i6.Future<List<_i2.Budget>>.value(<_i2.Budget>[]),
      ) as _i6.Future<List<_i2.Budget>>);

  @override
  _i6.Future<List<_i7.TransactionBudgetLink>> getTransactionLinksForBudget(
          int? budgetId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionLinksForBudget,
          [budgetId],
        ),
        returnValue: _i6.Future<List<_i7.TransactionBudgetLink>>.value(
            <_i7.TransactionBudgetLink>[]),
      ) as _i6.Future<List<_i7.TransactionBudgetLink>>);

  @override
  _i6.Future<List<_i7.TransactionBudgetLink>> getAllTransactionBudgetLinks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTransactionBudgetLinks,
          [],
        ),
        returnValue: _i6.Future<List<_i7.TransactionBudgetLink>>.value(
            <_i7.TransactionBudgetLink>[]),
      ) as _i6.Future<List<_i7.TransactionBudgetLink>>);

  @override
  _i6.Future<List<_i2.Budget>> getUnsyncedBudgets() => (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedBudgets,
          [],
        ),
        returnValue: _i6.Future<List<_i2.Budget>>.value(<_i2.Budget>[]),
      ) as _i6.Future<List<_i2.Budget>>);

  @override
  _i6.Future<void> markAsSynced(
    String? syncId,
    DateTime? syncTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [
            syncId,
            syncTime,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> insertOrUpdateFromSync(_i2.Budget? budget) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateFromSync,
          [budget],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [BudgetUpdateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBudgetUpdateService extends _i1.Mock
    implements _i8.BudgetUpdateService {
  MockBudgetUpdateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> updateBudgetOnTransactionChange(
    _i9.Transaction? transaction,
    _i10.TransactionChangeType? changeType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBudgetOnTransactionChange,
          [
            transaction,
            changeType,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> recalculateAllBudgetSpentAmounts() => (super.noSuchMethod(
        Invocation.method(
          #recalculateAllBudgetSpentAmounts,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> recalculateBudgetSpentAmount(int? budgetId) =>
      (super.noSuchMethod(
        Invocation.method(
          #recalculateBudgetSpentAmount,
          [budgetId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Stream<_i2.Budget> watchBudgetUpdates(int? budgetId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchBudgetUpdates,
          [budgetId],
        ),
        returnValue: _i6.Stream<_i2.Budget>.empty(),
      ) as _i6.Stream<_i2.Budget>);

  @override
  _i6.Stream<List<_i2.Budget>> watchAllBudgetUpdates() => (super.noSuchMethod(
        Invocation.method(
          #watchAllBudgetUpdates,
          [],
        ),
        returnValue: _i6.Stream<List<_i2.Budget>>.empty(),
      ) as _i6.Stream<List<_i2.Budget>>);

  @override
  _i6.Stream<Map<int, double>> watchBudgetSpentAmounts() => (super.noSuchMethod(
        Invocation.method(
          #watchBudgetSpentAmounts,
          [],
        ),
        returnValue: _i6.Stream<Map<int, double>>.empty(),
      ) as _i6.Stream<Map<int, double>>);

  @override
  _i6.Future<bool> authenticateForBudgetAccess() => (super.noSuchMethod(
        Invocation.method(
          #authenticateForBudgetAccess,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<Map<String, dynamic>> getBudgetUpdatePerformanceMetrics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBudgetUpdatePerformanceMetrics,
          [],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BudgetFilterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBudgetFilterService extends _i1.Mock
    implements _i11.BudgetFilterService {
  MockBudgetFilterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i9.Transaction>> getFilteredTransactionsForBudget(
    _i2.Budget? budget,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredTransactionsForBudget,
          [
            budget,
            startDate,
            endDate,
          ],
        ),
        returnValue:
            _i6.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i6.Future<List<_i9.Transaction>>);

  @override
  _i6.Future<double> calculateBudgetSpent(_i2.Budget? budget) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateBudgetSpent,
          [budget],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  _i6.Future<double> calculateBudgetRemaining(_i2.Budget? budget) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateBudgetRemaining,
          [budget],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  _i6.Future<bool> shouldIncludeTransaction(
    _i2.Budget? budget,
    _i9.Transaction? transaction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldIncludeTransaction,
          [
            budget,
            transaction,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<List<_i9.Transaction>> excludeDebtCreditTransactions(
          List<_i9.Transaction>? transactions) =>
      (super.noSuchMethod(
        Invocation.method(
          #excludeDebtCreditTransactions,
          [transactions],
        ),
        returnValue:
            _i6.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i6.Future<List<_i9.Transaction>>);

  @override
  _i6.Future<List<_i9.Transaction>> excludeObjectiveTransactions(
          List<_i9.Transaction>? transactions) =>
      (super.noSuchMethod(
        Invocation.method(
          #excludeObjectiveTransactions,
          [transactions],
        ),
        returnValue:
            _i6.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i6.Future<List<_i9.Transaction>>);

  @override
  _i6.Future<List<_i9.Transaction>> filterByWallets(
    List<_i9.Transaction>? transactions,
    List<String>? walletFks,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterByWallets,
          [
            transactions,
            walletFks,
          ],
        ),
        returnValue:
            _i6.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i6.Future<List<_i9.Transaction>>);

  @override
  _i6.Future<List<_i9.Transaction>> filterByCurrency(
    List<_i9.Transaction>? transactions,
    List<String>? currencyFks,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterByCurrency,
          [
            transactions,
            currencyFks,
          ],
        ),
        returnValue:
            _i6.Future<List<_i9.Transaction>>.value(<_i9.Transaction>[]),
      ) as _i6.Future<List<_i9.Transaction>>);

  @override
  _i6.Future<double> normalizeAmountToCurrency(
    double? amount,
    String? fromCurrency,
    String? toCurrency,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #normalizeAmountToCurrency,
          [
            amount,
            fromCurrency,
            toCurrency,
          ],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  _i6.Future<void> exportBudgetData(
    _i2.Budget? budget,
    String? filePath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportBudgetData,
          [
            budget,
            filePath,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> exportMultipleBudgets(List<_i2.Budget>? budgets) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportMultipleBudgets,
          [budgets],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i12.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i3.Account>> getAllAccounts() => (super.noSuchMethod(
        Invocation.method(
          #getAllAccounts,
          [],
        ),
        returnValue: _i6.Future<List<_i3.Account>>.value(<_i3.Account>[]),
      ) as _i6.Future<List<_i3.Account>>);

  @override
  _i6.Future<_i3.Account?> getAccountById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAccountById,
          [id],
        ),
        returnValue: _i6.Future<_i3.Account?>.value(),
      ) as _i6.Future<_i3.Account?>);

  @override
  _i6.Future<_i3.Account?> getAccountBySyncId(String? syncId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccountBySyncId,
          [syncId],
        ),
        returnValue: _i6.Future<_i3.Account?>.value(),
      ) as _i6.Future<_i3.Account?>);

  @override
  _i6.Future<_i3.Account?> getDefaultAccount() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultAccount,
          [],
        ),
        returnValue: _i6.Future<_i3.Account?>.value(),
      ) as _i6.Future<_i3.Account?>);

  @override
  _i6.Future<_i3.Account> createAccount(_i3.Account? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [account],
        ),
        returnValue: _i6.Future<_i3.Account>.value(_FakeAccount_1(
          this,
          Invocation.method(
            #createAccount,
            [account],
          ),
        )),
      ) as _i6.Future<_i3.Account>);

  @override
  _i6.Future<_i3.Account> updateAccount(_i3.Account? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAccount,
          [account],
        ),
        returnValue: _i6.Future<_i3.Account>.value(_FakeAccount_1(
          this,
          Invocation.method(
            #updateAccount,
            [account],
          ),
        )),
      ) as _i6.Future<_i3.Account>);

  @override
  _i6.Future<void> deleteAccount(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAccount,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAllAccounts() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllAccounts,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateBalance(
    int? accountId,
    double? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBalance,
          [
            accountId,
            amount,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i3.Account>> getUnsyncedAccounts() => (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedAccounts,
          [],
        ),
        returnValue: _i6.Future<List<_i3.Account>>.value(<_i3.Account>[]),
      ) as _i6.Future<List<_i3.Account>>);

  @override
  _i6.Future<void> markAsSynced(
    String? syncId,
    DateTime? syncTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [
            syncId,
            syncTime,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> insertOrUpdateFromSync(_i3.Account? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateFromSync,
          [account],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i13.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i4.Category>> getAllCategories() => (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: _i6.Future<List<_i4.Category>>.value(<_i4.Category>[]),
      ) as _i6.Future<List<_i4.Category>>);

  @override
  _i6.Future<List<_i4.Category>> getExpenseCategories() => (super.noSuchMethod(
        Invocation.method(
          #getExpenseCategories,
          [],
        ),
        returnValue: _i6.Future<List<_i4.Category>>.value(<_i4.Category>[]),
      ) as _i6.Future<List<_i4.Category>>);

  @override
  _i6.Future<List<_i4.Category>> getIncomeCategories() => (super.noSuchMethod(
        Invocation.method(
          #getIncomeCategories,
          [],
        ),
        returnValue: _i6.Future<List<_i4.Category>>.value(<_i4.Category>[]),
      ) as _i6.Future<List<_i4.Category>>);

  @override
  _i6.Future<_i4.Category?> getCategoryById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getCategoryById,
          [id],
        ),
        returnValue: _i6.Future<_i4.Category?>.value(),
      ) as _i6.Future<_i4.Category?>);

  @override
  _i6.Future<_i4.Category?> getCategoryBySyncId(String? syncId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryBySyncId,
          [syncId],
        ),
        returnValue: _i6.Future<_i4.Category?>.value(),
      ) as _i6.Future<_i4.Category?>);

  @override
  _i6.Future<_i4.Category> createCategory(_i4.Category? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCategory,
          [category],
        ),
        returnValue: _i6.Future<_i4.Category>.value(_FakeCategory_2(
          this,
          Invocation.method(
            #createCategory,
            [category],
          ),
        )),
      ) as _i6.Future<_i4.Category>);

  @override
  _i6.Future<_i4.Category> updateCategory(_i4.Category? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCategory,
          [category],
        ),
        returnValue: _i6.Future<_i4.Category>.value(_FakeCategory_2(
          this,
          Invocation.method(
            #updateCategory,
            [category],
          ),
        )),
      ) as _i6.Future<_i4.Category>);

  @override
  _i6.Future<void> deleteCategory(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCategory,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAllCategories() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllCategories,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i4.Category>> getUnsyncedCategories() => (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedCategories,
          [],
        ),
        returnValue: _i6.Future<List<_i4.Category>>.value(<_i4.Category>[]),
      ) as _i6.Future<List<_i4.Category>>);

  @override
  _i6.Future<void> markAsSynced(
    String? syncId,
    DateTime? syncTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [
            syncId,
            syncTime,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> insertOrUpdateFromSync(_i4.Category? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateFromSync,
          [category],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
