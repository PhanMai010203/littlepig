// Mocks generated by Mockito 5.4.6 from annotations
// in finance/test/features/agent/ai_service_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:finance/features/accounts/domain/entities/account.dart' as _i4;
import 'package:finance/features/accounts/domain/repositories/account_repository.dart'
    as _i10;
import 'package:finance/features/budgets/domain/entities/budget.dart' as _i3;
import 'package:finance/features/budgets/domain/entities/transaction_budget_link.dart'
    as _i9;
import 'package:finance/features/budgets/domain/repositories/budget_repository.dart'
    as _i8;
import 'package:finance/features/categories/domain/entities/category.dart'
    as _i5;
import 'package:finance/features/categories/domain/repositories/category_repository.dart'
    as _i11;
import 'package:finance/features/transactions/domain/entities/transaction.dart'
    as _i2;
import 'package:finance/features/transactions/domain/repositories/transaction_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransaction_0 extends _i1.SmartFake implements _i2.Transaction {
  _FakeTransaction_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBudget_1 extends _i1.SmartFake implements _i3.Budget {
  _FakeBudget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccount_2 extends _i1.SmartFake implements _i4.Account {
  _FakeAccount_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategory_3 extends _i1.SmartFake implements _i5.Category {
  _FakeCategory_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i6.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i2.Transaction>> getAllTransactions() => (super.noSuchMethod(
        Invocation.method(
          #getAllTransactions,
          [],
        ),
        returnValue:
            _i7.Future<List<_i2.Transaction>>.value(<_i2.Transaction>[]),
      ) as _i7.Future<List<_i2.Transaction>>);

  @override
  _i7.Future<List<_i2.Transaction>> getTransactions({
    required int? page,
    required int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i7.Future<List<_i2.Transaction>>.value(<_i2.Transaction>[]),
      ) as _i7.Future<List<_i2.Transaction>>);

  @override
  _i7.Future<List<_i2.Transaction>> getTransactionsByAccount(int? accountId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsByAccount,
          [accountId],
        ),
        returnValue:
            _i7.Future<List<_i2.Transaction>>.value(<_i2.Transaction>[]),
      ) as _i7.Future<List<_i2.Transaction>>);

  @override
  _i7.Future<List<_i2.Transaction>> getTransactionsByCategory(
          int? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsByCategory,
          [categoryId],
        ),
        returnValue:
            _i7.Future<List<_i2.Transaction>>.value(<_i2.Transaction>[]),
      ) as _i7.Future<List<_i2.Transaction>>);

  @override
  _i7.Future<List<_i2.Transaction>> getTransactionsByDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsByDateRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue:
            _i7.Future<List<_i2.Transaction>>.value(<_i2.Transaction>[]),
      ) as _i7.Future<List<_i2.Transaction>>);

  @override
  _i7.Future<_i2.Transaction?> getTransactionById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionById,
          [id],
        ),
        returnValue: _i7.Future<_i2.Transaction?>.value(),
      ) as _i7.Future<_i2.Transaction?>);

  @override
  _i7.Future<_i2.Transaction?> getTransactionBySyncId(String? syncId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionBySyncId,
          [syncId],
        ),
        returnValue: _i7.Future<_i2.Transaction?>.value(),
      ) as _i7.Future<_i2.Transaction?>);

  @override
  _i7.Future<_i2.Transaction> createTransaction(_i2.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTransaction,
          [transaction],
        ),
        returnValue: _i7.Future<_i2.Transaction>.value(_FakeTransaction_0(
          this,
          Invocation.method(
            #createTransaction,
            [transaction],
          ),
        )),
      ) as _i7.Future<_i2.Transaction>);

  @override
  _i7.Future<_i2.Transaction> updateTransaction(_i2.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [transaction],
        ),
        returnValue: _i7.Future<_i2.Transaction>.value(_FakeTransaction_0(
          this,
          Invocation.method(
            #updateTransaction,
            [transaction],
          ),
        )),
      ) as _i7.Future<_i2.Transaction>);

  @override
  _i7.Future<void> deleteTransaction(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<_i2.Transaction>> getUnsyncedTransactions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedTransactions,
          [],
        ),
        returnValue:
            _i7.Future<List<_i2.Transaction>>.value(<_i2.Transaction>[]),
      ) as _i7.Future<List<_i2.Transaction>>);

  @override
  _i7.Future<void> markAsSynced(
    String? syncId,
    DateTime? syncTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [
            syncId,
            syncTime,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> insertOrUpdateFromSync(_i2.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateFromSync,
          [transaction],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<double> getTotalByCategory(
    int? categoryId,
    DateTime? from,
    DateTime? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalByCategory,
          [
            categoryId,
            from,
            to,
          ],
        ),
        returnValue: _i7.Future<double>.value(0.0),
      ) as _i7.Future<double>);

  @override
  _i7.Future<double> getTotalByAccount(
    int? accountId,
    DateTime? from,
    DateTime? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalByAccount,
          [
            accountId,
            from,
            to,
          ],
        ),
        returnValue: _i7.Future<double>.value(0.0),
      ) as _i7.Future<double>);

  @override
  _i7.Future<Map<int, double>> getSpendingByCategory(
    DateTime? from,
    DateTime? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpendingByCategory,
          [
            from,
            to,
          ],
        ),
        returnValue: _i7.Future<Map<int, double>>.value(<int, double>{}),
      ) as _i7.Future<Map<int, double>>);

  @override
  _i7.Future<void> collectPartialCredit({
    required _i2.Transaction? credit,
    required double? amount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectPartialCredit,
          [],
          {
            #credit: credit,
            #amount: amount,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> settlePartialDebt({
    required _i2.Transaction? debt,
    required double? amount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #settlePartialDebt,
          [],
          {
            #debt: debt,
            #amount: amount,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<_i2.Transaction>> getLoanPayments(int? parentTransactionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLoanPayments,
          [parentTransactionId],
        ),
        returnValue:
            _i7.Future<List<_i2.Transaction>>.value(<_i2.Transaction>[]),
      ) as _i7.Future<List<_i2.Transaction>>);

  @override
  double getRemainingAmount(_i2.Transaction? loan) => (super.noSuchMethod(
        Invocation.method(
          #getRemainingAmount,
          [loan],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i7.Future<void> deleteAllTransactions() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllTransactions,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [BudgetRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBudgetRepository extends _i1.Mock implements _i8.BudgetRepository {
  MockBudgetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i3.Budget>> getAllBudgets() => (super.noSuchMethod(
        Invocation.method(
          #getAllBudgets,
          [],
        ),
        returnValue: _i7.Future<List<_i3.Budget>>.value(<_i3.Budget>[]),
      ) as _i7.Future<List<_i3.Budget>>);

  @override
  _i7.Future<List<_i3.Budget>> getActiveBudgets() => (super.noSuchMethod(
        Invocation.method(
          #getActiveBudgets,
          [],
        ),
        returnValue: _i7.Future<List<_i3.Budget>>.value(<_i3.Budget>[]),
      ) as _i7.Future<List<_i3.Budget>>);

  @override
  _i7.Future<_i3.Budget?> getBudgetById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getBudgetById,
          [id],
        ),
        returnValue: _i7.Future<_i3.Budget?>.value(),
      ) as _i7.Future<_i3.Budget?>);

  @override
  _i7.Future<_i3.Budget?> getBudgetBySyncId(String? syncId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBudgetBySyncId,
          [syncId],
        ),
        returnValue: _i7.Future<_i3.Budget?>.value(),
      ) as _i7.Future<_i3.Budget?>);

  @override
  _i7.Future<List<_i3.Budget>> getBudgetsByCategory(int? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBudgetsByCategory,
          [categoryId],
        ),
        returnValue: _i7.Future<List<_i3.Budget>>.value(<_i3.Budget>[]),
      ) as _i7.Future<List<_i3.Budget>>);

  @override
  _i7.Future<_i3.Budget> createBudget(_i3.Budget? budget) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBudget,
          [budget],
        ),
        returnValue: _i7.Future<_i3.Budget>.value(_FakeBudget_1(
          this,
          Invocation.method(
            #createBudget,
            [budget],
          ),
        )),
      ) as _i7.Future<_i3.Budget>);

  @override
  _i7.Future<_i3.Budget> updateBudget(_i3.Budget? budget) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBudget,
          [budget],
        ),
        returnValue: _i7.Future<_i3.Budget>.value(_FakeBudget_1(
          this,
          Invocation.method(
            #updateBudget,
            [budget],
          ),
        )),
      ) as _i7.Future<_i3.Budget>);

  @override
  _i7.Future<void> deleteBudget(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBudget,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAllBudgets() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllBudgets,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateSpentAmount(
    int? budgetId,
    double? spentAmount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSpentAmount,
          [
            budgetId,
            spentAmount,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> addTransactionToBudget(
    int? transactionId,
    int? budgetId, {
    double? amount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransactionToBudget,
          [
            transactionId,
            budgetId,
          ],
          {#amount: amount},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeTransactionFromBudget(
    int? transactionId,
    int? budgetId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTransactionFromBudget,
          [
            transactionId,
            budgetId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<_i3.Budget>> getBudgetsForTransaction(int? transactionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBudgetsForTransaction,
          [transactionId],
        ),
        returnValue: _i7.Future<List<_i3.Budget>>.value(<_i3.Budget>[]),
      ) as _i7.Future<List<_i3.Budget>>);

  @override
  _i7.Future<List<_i9.TransactionBudgetLink>> getTransactionLinksForBudget(
          int? budgetId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionLinksForBudget,
          [budgetId],
        ),
        returnValue: _i7.Future<List<_i9.TransactionBudgetLink>>.value(
            <_i9.TransactionBudgetLink>[]),
      ) as _i7.Future<List<_i9.TransactionBudgetLink>>);

  @override
  _i7.Future<List<_i9.TransactionBudgetLink>> getAllTransactionBudgetLinks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTransactionBudgetLinks,
          [],
        ),
        returnValue: _i7.Future<List<_i9.TransactionBudgetLink>>.value(
            <_i9.TransactionBudgetLink>[]),
      ) as _i7.Future<List<_i9.TransactionBudgetLink>>);

  @override
  _i7.Future<List<_i3.Budget>> getUnsyncedBudgets() => (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedBudgets,
          [],
        ),
        returnValue: _i7.Future<List<_i3.Budget>>.value(<_i3.Budget>[]),
      ) as _i7.Future<List<_i3.Budget>>);

  @override
  _i7.Future<void> markAsSynced(
    String? syncId,
    DateTime? syncTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [
            syncId,
            syncTime,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> insertOrUpdateFromSync(_i3.Budget? budget) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateFromSync,
          [budget],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i10.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i4.Account>> getAllAccounts() => (super.noSuchMethod(
        Invocation.method(
          #getAllAccounts,
          [],
        ),
        returnValue: _i7.Future<List<_i4.Account>>.value(<_i4.Account>[]),
      ) as _i7.Future<List<_i4.Account>>);

  @override
  _i7.Future<_i4.Account?> getAccountById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAccountById,
          [id],
        ),
        returnValue: _i7.Future<_i4.Account?>.value(),
      ) as _i7.Future<_i4.Account?>);

  @override
  _i7.Future<_i4.Account?> getAccountBySyncId(String? syncId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccountBySyncId,
          [syncId],
        ),
        returnValue: _i7.Future<_i4.Account?>.value(),
      ) as _i7.Future<_i4.Account?>);

  @override
  _i7.Future<_i4.Account?> getDefaultAccount() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultAccount,
          [],
        ),
        returnValue: _i7.Future<_i4.Account?>.value(),
      ) as _i7.Future<_i4.Account?>);

  @override
  _i7.Future<_i4.Account> createAccount(_i4.Account? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [account],
        ),
        returnValue: _i7.Future<_i4.Account>.value(_FakeAccount_2(
          this,
          Invocation.method(
            #createAccount,
            [account],
          ),
        )),
      ) as _i7.Future<_i4.Account>);

  @override
  _i7.Future<_i4.Account> updateAccount(_i4.Account? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAccount,
          [account],
        ),
        returnValue: _i7.Future<_i4.Account>.value(_FakeAccount_2(
          this,
          Invocation.method(
            #updateAccount,
            [account],
          ),
        )),
      ) as _i7.Future<_i4.Account>);

  @override
  _i7.Future<void> deleteAccount(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAccount,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAllAccounts() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllAccounts,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateBalance(
    int? accountId,
    double? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBalance,
          [
            accountId,
            amount,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<_i4.Account>> getUnsyncedAccounts() => (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedAccounts,
          [],
        ),
        returnValue: _i7.Future<List<_i4.Account>>.value(<_i4.Account>[]),
      ) as _i7.Future<List<_i4.Account>>);

  @override
  _i7.Future<void> markAsSynced(
    String? syncId,
    DateTime? syncTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [
            syncId,
            syncTime,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> insertOrUpdateFromSync(_i4.Account? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateFromSync,
          [account],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i11.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i5.Category>> getAllCategories() => (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: _i7.Future<List<_i5.Category>>.value(<_i5.Category>[]),
      ) as _i7.Future<List<_i5.Category>>);

  @override
  _i7.Future<List<_i5.Category>> getExpenseCategories() => (super.noSuchMethod(
        Invocation.method(
          #getExpenseCategories,
          [],
        ),
        returnValue: _i7.Future<List<_i5.Category>>.value(<_i5.Category>[]),
      ) as _i7.Future<List<_i5.Category>>);

  @override
  _i7.Future<List<_i5.Category>> getIncomeCategories() => (super.noSuchMethod(
        Invocation.method(
          #getIncomeCategories,
          [],
        ),
        returnValue: _i7.Future<List<_i5.Category>>.value(<_i5.Category>[]),
      ) as _i7.Future<List<_i5.Category>>);

  @override
  _i7.Future<_i5.Category?> getCategoryById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getCategoryById,
          [id],
        ),
        returnValue: _i7.Future<_i5.Category?>.value(),
      ) as _i7.Future<_i5.Category?>);

  @override
  _i7.Future<_i5.Category?> getCategoryBySyncId(String? syncId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryBySyncId,
          [syncId],
        ),
        returnValue: _i7.Future<_i5.Category?>.value(),
      ) as _i7.Future<_i5.Category?>);

  @override
  _i7.Future<_i5.Category> createCategory(_i5.Category? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCategory,
          [category],
        ),
        returnValue: _i7.Future<_i5.Category>.value(_FakeCategory_3(
          this,
          Invocation.method(
            #createCategory,
            [category],
          ),
        )),
      ) as _i7.Future<_i5.Category>);

  @override
  _i7.Future<_i5.Category> updateCategory(_i5.Category? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCategory,
          [category],
        ),
        returnValue: _i7.Future<_i5.Category>.value(_FakeCategory_3(
          this,
          Invocation.method(
            #updateCategory,
            [category],
          ),
        )),
      ) as _i7.Future<_i5.Category>);

  @override
  _i7.Future<void> deleteCategory(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCategory,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAllCategories() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllCategories,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<_i5.Category>> getUnsyncedCategories() => (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedCategories,
          [],
        ),
        returnValue: _i7.Future<List<_i5.Category>>.value(<_i5.Category>[]),
      ) as _i7.Future<List<_i5.Category>>);

  @override
  _i7.Future<void> markAsSynced(
    String? syncId,
    DateTime? syncTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsSynced,
          [
            syncId,
            syncTime,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> insertOrUpdateFromSync(_i5.Category? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateFromSync,
          [category],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
